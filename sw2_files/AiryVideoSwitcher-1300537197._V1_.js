(function(document,window,Math){var initializeCodeDependentOnJQuery=function(jQuery){var Util={addToMultiMap:function(multiMap,key,value){var array=multiMap[key]||(multiMap[key]=[]);
array.push(value);
},createTimestamp:function(){return new Date().valueOf();
},inheritsFrom:function(parent,prototypeProperties,staticProperties){var isConstructorDefined=prototypeProperties&&prototypeProperties.hasOwnProperty("constructor");
var child=isConstructorDefined?prototypeProperties["constructor"]:function(){return parent.apply(this,arguments);
};
Util.mixin(child,parent,staticProperties||{});
var Class=function(){this["constructor"]=child;
};
Class.prototype=parent.prototype;
child.prototype=new Class();
if(prototypeProperties){Util.mixin(child.prototype,prototypeProperties);
}child.prototype._super=parent.prototype;
return child;
},mixin:function(target){var index=0;
for(;
index<arguments.length;
index++){object=arguments[index];
if(!object){return;
}for(var prop in object){try{target[prop]=object[prop];
}catch(err){}}}return target;
},noop:function(){},wrapWithScope:function(callback,scope){return function(){return(callback||Util.noop).apply(scope,arguments);
};
}};
var Events={bind:function(eventName,callback,scope){if(!eventName||!callback){return this;
}this._events=this._events||{};
Util.addToMultiMap(this._events,eventName,{type:eventName,callback:callback,scope:scope||this});
return this;
},trigger:function(eventName,eventContext){if(!this._events){return this;
}eventContext=eventContext||{};
eventContext.timestamp=eventContext.timestamp||Util.createTimestamp();
jQuery.each(this._events[eventName]||[],function(key,eventObj){eventObj.callback.call(eventObj.scope,eventObj.type,eventContext);
});
return this;
}};
var View=function(config){if(config.el){this._setupForEl(config.el);
}else{if(config.id){this._setupForId(config.id);
}else{if(config.tagName){this._setupForTagName(config.tagName);
}}}this._setupEvents(config.events,config.mouseEvents);
this.model=config.model;
this.config=config;
this.initialize();
};
View.prototype=Util.mixin({el:null,$el:null,id:null,_setupForEl:function(el){this.el=el;
var $el=this.$el=jQuery(el);
this.id=$el.attr("id");
},_setupForId:function(id){this._setupForEl(document.getElementById(id));
},_setupForTagName:function(tagName){var $el=this.$el=jQuery("<"+tagName+"></"+tagName+">");
this.el=$el.length?$el[0]:undefined;
},_setupEvents:function(events,mouseEvents){events=jQuery.extend({},this.events(),events);
mouseEvents=jQuery.extend({},this.mouseEvents(),mouseEvents);
jQuery.each(events,this.bind);
if(!this.$el){return;
}var that=this;
jQuery.each(mouseEvents,function(eventName,callback){that.$el.bind(eventName,function(){callback.apply(that,arguments);
});
});
},initialize:Util.noop,events:Util.noop,mouseEvents:Util.noop,forwardDomEvent:function(event){this.trigger(event.type,this.model);
}},Events);
var Airy=window["Airy"]=window["Airy"]||{};
var Lightbox=Airy["Lightbox"]=Airy["Lightbox"]||{};
var EVENTS={NO_CONTAINER_FOUND:"nocontainerfound",CONTAINER_FOUND:"containerfound",CONTAINER_UPDATED:"containerupdated",NO_CONTENT_FOUND:"nocontentfound",CONTENT_UPDATED:"contentupdated",BEFORE_SHOW:"beforeshow",SHOWN:"shown",BEFORE_HIDE:"beforehide",HIDDEN:"hidden",HEADER_TEXT_CHANGED:"headertextchanged",TRIGGER_CLICKED:"triggerclicked",ESCAPE_KEY_UP:"escapekeyup"};
Lightbox["bind"]=function(config){var lightboxView=config.lightboxView||Lightbox["createView"](config);
jQuery.each(config.bindings||{},Util.wrapWithScope(lightboxView.bind,lightboxView));
var trigger=config.trigger||{};
new ClickView({id:trigger.id}).bind("click",function(){lightboxView.trigger(EVENTS.TRIGGER_CLICKED,trigger);
});
return lightboxView;
};
Lightbox["createView"]=function(config){var lightboxView=config.lightboxView||new LightboxView({el:config.el,model:config.model,tagName:"div"});
jQuery.each(config.bindings||{},Util.wrapWithScope(lightboxView.bind,lightboxView));
return lightboxView;
};
var LightboxView=Util.inheritsFrom(View,{isRendered:false,isHidden:true,initialize:function(){this.$el.hide();
this.bind(EVENTS.TRIGGER_CLICKED,this.triggerClicked);
this._views={};
},triggerClicked:function(event,context){this.trigger(this.isRendered?EVENTS.CONTAINER_FOUND:EVENTS.NO_CONTAINER_FOUND);
},hide:function(){if(this.isHidden){return;
}this.isHidden=true;
this.trigger(EVENTS.BEFORE_HIDE);
this.$el.hide();
this.trigger(EVENTS.HIDDEN);
},show:function(){if(!this.isHidden){return;
}this.isHidden=false;
this.trigger(EVENTS.BEFORE_SHOW);
this.$el.show();
this.resize();
this.trigger(EVENTS.SHOWN);
},resize:function(){if(!this._views.modal){return;
}this._views.modal.resize();
},setHeaderText:function(text){this._views.header.setHeaderText(text);
this.trigger(EVENTS.HEADER_TEXT_CHANGED);
},setContainerHtml:function(html){if(this.isRendered){return;
}var $el=this.$el.html(html);
this.render();
$el.appendTo("body");
this.trigger(EVENTS.CONTAINER_UPDATED);
},render:function(){var $el=this.$el;
var $pageBlanket=$el.find("#"+this.model.pageBlanketId);
var pageBlanketView=this._views.pageBlanket=new PageBlanketView({el:$pageBlanket[0]}).bind("close",this.hide,this);
var $modal=$el.find("#"+this.model.modalId);
var modalView=this._views.modal=new ModalView({el:$modal[0],model:this.model});
this._views.window=new WindowView({el:window}).bind("resize",pageBlanketView.resize,pageBlanketView).bind("resize",modalView.resize,modalView);
this._views.document=new DocumentView({el:document}).bind(EVENTS.ESCAPE_KEY_UP,this.hide,this);
var $header=$el.find(".airy-header");
this._views.header=new HeaderView({el:$header[0]}).bind("close",this.hide,this);
var $modalContent=$el.find(".airy-modal-content");
this._views.modalContent=new View({el:$modalContent[0]});
this.isRendered=true;
return this;
},setContentHtml:function(html){if(!this._views.modalContent){return;
}this._views.modalContent.$el.html(html);
this.trigger(EVENTS.CONTENT_UPDATED);
}});
var PageBlanketView=Util.inheritsFrom(View,{initialize:function(){this.$document=jQuery(document);
},mouseEvents:function(){return{"click":this.close};
},close:function(){this.trigger("close");
},resize:function(){if(!this._isIE7AndBelow()){return;
}},_isIE7AndBelow:function(){return !!document.all&&!window.atob&&!document.addEventListener&&!document.querySelector;
}});
var HeaderView=Util.inheritsFrom(View,{initialize:function(){this.$headerText=this.$el.find(".airy-header-text");
var $closeButton=this.$el.find(".airy-close-button");
if(!$closeButton.length){return;
}new ClickView({el:$closeButton[0]}).bind("click",this.close,this);
},close:function(){this.trigger("close");
},setHeaderText:function(text){this.$headerText.html(text);
}});
var ModalView=Util.inheritsFrom(View,{initialize:function(){this.$window=jQuery(window);
},mouseEvents:function(){return{"click":this.click};
},click:function(event){event.stopPropagation();
},resize:function(){var widthPx=this.$el.width();
var heightPx=this.$el.height();
var widthPercent=Math.round(widthPx/this.$window.width()*100);
var availableHeight=this.$window.height()*this.model.targetHeightPercent/100;
var heightDiffPx=heightPx-availableHeight;
if(heightDiffPx<=0&&(widthPercent>=this.model.targetWidthPercent)){return;
}var widthDiffPx=widthPx/heightPx*heightDiffPx;
var scale=(widthPx-widthDiffPx)/widthPx;
this.$el.width(Math.min(scale*widthPercent,this.model.targetWidthPercent)+"%");
}});
var WindowView=Util.inheritsFrom(View,{mouseEvents:function(){return{"resize":this.forwardDomEvent};
}});
var DocumentView=Util.inheritsFrom(View,{mouseEvents:function(){return{"keyup":this.keyUp};
},keyUp:function(event){var code=event.keyCode||event.which;
if(code!==27){return;
}this.trigger(EVENTS.ESCAPE_KEY_UP);
}});
var ClickView=Util.inheritsFrom(View,{mouseEvents:function(){return{"click":this.forwardDomEvent};
}});
var amznJQ=window["amznJQ"];
if(amznJQ){amznJQ["declareAvailable"]("AiryLightbox");
}var P=window["P"];
if(P&&!Lightbox.isRegisteredWithAui){P["register"]("AiryLightbox",function(){Lightbox.isRegisteredWithAui=true;
return Lightbox;
});
}Airy.ForesterPublisher=function(config){this._metrics={};
this._url=config.url;
this._queryString=this._constructQueryString(config.metadataParams);
};
Airy.ForesterPublisher.prototype={UNIT_COUNT:"",publish:function(){var url=this._build();
if(!url){return this;
}new Image().src=url;
return this;
},_build:function(){var urlParts=[this._url];
jQuery.each(this._metrics,function(unit,unitMetrics){unit=unit?(":u="+unit):"";
jQuery.each(unitMetrics,function(metricName,value){urlParts.push(metricName+"@v="+value+unit);
});
});
if(urlParts.length===1){return null;
}this._clearMetrics();
return urlParts.join("/")+"?"+this._queryString;
},addCountMetric:function(metricName,metricValue){if(metricValue==null){metricValue=1;
}this._addMetricToMap(metricName,metricValue,this.UNIT_COUNT);
return this;
},addPerformanceMetric:function(metricName,metricValue,unit){this._addMetricToMap(metricName,metricValue,unit);
return this;
},_addMetricToMap:function(metricName,metricValue,unit){var unitMetrics=this._metrics[unit]=this._metrics[unit]||{};
unitMetrics[metricName]=metricValue;
},_clearMetrics:function(){this._metrics={};
return this;
},_constructQueryString:function(queryParameters){var queryString=[];
jQuery.each(queryParameters,function(key,value){queryString.push(encodeURIComponent(key)+"="+encodeURIComponent(value));
});
return queryString.join("&");
}};
Airy.ItemDetailsMediaFetcher=function(config){this._endpoint=config.endpoint;
this._baseQueryParameters=config.baseQueryParameters||{};
if(!config.sections||!config.sections.length){return;
}this._sections=config.sections;
};
Airy.ItemDetailsMediaFetcher.prototype={fetch:function(asins,success,error){if(!asins||!asins.length){error();
return;
}var queryString=this._constructQueryString(asins);
var url=this._endpoint+"?"+queryString;
var that=this;
jQuery.ajax({url:url}).done(function(data){var items=data.items;
if(!items||!items.length){error();
return;
}var mediaContexts={};
jQuery.each(items,function(index,item){mediaContexts[item.id]=that._getMediaContextFromItem(item);
});
success(mediaContexts);
}).fail(error);
},_getMediaContextFromItem:function(item){var productData=item.productData;
var slateImageUrl=this._extractSlateUrl(productData);
var mediaContext={comScore:this._extractComScoreReporter(item),contentId:item.id,contentMinAge:this._extractContentMinAge(productData),mediaSourceInfo:this._extractMediaSourceInfo(item),slateImages:{preloadSlate:slateImageUrl,postMediaSlate:slateImageUrl}};
return mediaContext;
},_extractComScoreReporter:function(item){var externalMetricsReporters=item.externalMetricsReportersSection;
if(!externalMetricsReporters){return null;
}var reporters=externalMetricsReporters.reporters;
if(!reporters||!reporters.length){return;
}var filteredReporters=reporters.filter(this._comScoreReporterFilter);
return filteredReporters.shift();
},_comScoreReporterFilter:function(reporter){return reporter.name==="ComscoreReporter";
},_extractContentMinAge:function(productData){if(productData.minAgeToViewContent==null){return null;
}return parseInt(productData.minAgeToViewContent,10);
},_extractSlateUrl:function(productData){var image=productData.image;
if(!image){return null;
}return image.imageUrl;
},_extractMediaSourceInfo:function(item){var mediaInfoSection=item.mediaInfoSection;
if(!mediaInfoSection){return;
}var mediaInfoList=mediaInfoSection.mediaInfoList;
if(!mediaInfoList){return;
}var streamingUrlInfos=[];
jQuery.each(mediaInfoList,function(index,mediaInfo){streamingUrlInfos.push({mimeType:mediaInfo.mimeType,url:mediaInfo.streamingUrl});
});
return streamingUrlInfos;
},_constructQueryString:function(asins){var queryString=[];
jQuery.each(this._baseQueryParameters,function(key,value){queryString.push(encodeURIComponent(key)+"="+encodeURIComponent(value));
});
jQuery.each(asins,function(index,asin){queryString.push("asin="+encodeURIComponent(asin));
});
if(this._sections){var sectionsStr=this._sections.join(",");
queryString.push("sections="+encodeURIComponent(sectionsStr));
}return queryString.join("&");
}};
var VideoSwitcher=Airy["VideoSwitcher"]=Airy["VideoSwitcher"]||Util.inheritsFrom(View,{initialize:function(){this._isContinuousPlayEnabled=false;
this._metricsPublisher=this.config.metricsPublisher;
var stage=this._stage=new Stage({id:this.config.airyStageId,mediaContextFetcher:this.config.mediaContextFetcher,model:this.config.model});
this._setupStageMetrics(stage);
var ShovelerClass=this.config.useAui?FreeScrollCarousel:Shoveler;
this._shoveler=new ShovelerClass({alignmentOffsetPx:this.config.alignmentOffsetPx,el:this.config.shovelerEl,id:this.config.shovelerId,items:this._generateItemList(this.config.model.loadMediaContexts),nextButtonSelector:this.config.nextButtonSelector,backButtonSelector:this.config.backButtonSelector}).bind("selected",stage.load,stage).bind("selected",this.trigger,this).bind("selectedasync",stage.loadAsync,stage).bind("selectedasync",function(event,context){this.trigger("selected",context);
},this).bind("prepare",stage.prepare,stage);
},_setupStageMetrics:function(stage){if(!this._metricsPublisher){return;
}var reporter=new Stage.MetricsReporter({metricsPublisher:this._metricsPublisher});
stage.bind("updatingcontext",reporter.handleUpdatingContext,reporter).bind("contextupdated",reporter.handleContextUpdated,reporter).bind("contextupdatefailed",reporter.handleContextUpdateFailed,reporter);
},renderShoveler:function(){this._shoveler.render();
return this;
},enableContinuousPlay:function(){if(this._isContinuousPlayEnabled){return;
}var playlistController=new PlaylistController({model:this.config.model}).bind("selectnextvideo",this._shoveler.selectNext,this._shoveler).bind("preparenextvideo",this._shoveler.prepareNext,this._shoveler).enableContinuousPlay();
this._setupContinuousPlayMetrics();
this._isContinuousPlayEnabled=true;
return this;
},_setupContinuousPlayMetrics:function(){if(!this._metricsPublisher){return;
}var reporter=new PlaylistController.MetricsReporter({metricsPublisher:this._metricsPublisher});
var videoController=new VideoController({model:this.config.model}).bind("videoended",reporter.handleVideoEnded,reporter).bind("videocanplay",reporter.handleCanPlay,reporter).setUp();
this._shoveler.bind("selectmanually",reporter.clearMetrics,reporter);
},isContinuousPlayEnabled:function(){return this._isContinuousPlayEnabled;
},select:function(contentId,forceShow,isAsync,selectRequestTimestamp){if(contentId==null){return this;
}this._shoveler.select(contentId,forceShow,isAsync,selectRequestTimestamp);
return this;
},getSelectedId:function(){return this._shoveler.getSelectedId();
},show:function(){this._stage.show();
return this;
},hide:function(){this._stage.hide();
return this;
},_generateItemList:function(loadMediaContexts){var result=[];
jQuery.each(loadMediaContexts,function(correspondingElId,loadMediaContext){result.push(new Item({id:correspondingElId,model:loadMediaContext}));
});
return result;
}});
var VideoController=Util.inheritsFrom(View,{setUp:function(){var airyInstance=this.model.airyInstance;
if(!airyInstance){return;
}airyInstance.bind("ended",this.triggerEnded,this);
airyInstance.bind("canplay",this.triggerCanPlay,this);
},triggerEnded:function(){this._triggerVideoEvent("videoended");
},triggerCanPlay:function(){this._triggerVideoEvent("videocanplay");
},_triggerVideoEvent:function(event){this.trigger(event,{timestamp:Util.createTimestamp()});
}});
var PlaylistController=Util.inheritsFrom(View,{enableContinuousPlay:function(){var airyInstance=this.model.airyInstance;
if(!airyInstance){return;
}airyInstance.addCuePoint({callback:this.prepareNextVideo,scope:this,type:"percent",values:"50%"});
airyInstance.bind("ended",this.selectNextVideo,this);
return this;
},prepareNextVideo:function(){this.trigger("preparenextvideo");
},selectNextVideo:function(){this.trigger("selectnextvideo");
},endPlaylist:function(){var airyInstance=this.model.airyInstance;
if(!airyInstance){return;
}airyInstance.enterNormalScreen();
return this;
}});
PlaylistController.MetricsReporter=Util.inheritsFrom(View,{CONTINUOUS_PLAY_END_TO_CAN_PLAY_DURATION:"qos.videoSwitcher.:continuousPlayEndToCanPlayDuration",initialize:function(){this._metricsPublisher=this.config.metricsPublisher;
this._reporter=new DurationMetricReporter(this.config.metricsPublisher,this.CONTINUOUS_PLAY_END_TO_CAN_PLAY_DURATION);
},handleVideoEnded:function(event,context){this._reporter.handleStartEvent(event,context);
},handleCanPlay:function(event,context){this._reporter.handleEndEvent(event,context);
},clearMetrics:function(){this._reporter.clearMetrics();
}});
var Stage=Util.inheritsFrom(View,{load:function(event,context){return this._load(context,false);
},loadAsync:function(event,context){return this._load(context,true);
},_load:function(context,isAsync){var airyInstance=this.model.airyInstance;
if(!airyInstance){return this;
}if(!context.mediaSourceInfo&&this.config.mediaContextFetcher){this._fetchUpdatedContext(context,function(updatedContext){this._loadMedia(updatedContext,true);
});
return this;
}return this._loadMedia(context,isAsync);
},prepare:function(event,context){if(context.mediaSourceInfo||!this.config.mediaContextFetcher){return this;
}this._fetchUpdatedContext(context,function(updatedContext){this.trigger("prepared",updatedContext);
});
return this;
},_fetchUpdatedContext:function(context,successCallback){var that=this;
var contentId=context.contentId;
this.trigger("updatingcontext");
this.config.mediaContextFetcher.fetch([contentId],function(contexts){var fetchedContext=contexts[contentId];
jQuery.extend(context,fetchedContext);
successCallback.call(that,context);
that.trigger("contextupdated");
},function(){that.trigger("contextupdatefailed");
});
return this;
},_loadMedia:function(context,isAsync){var airyInstance=this.model.airyInstance;
if(!airyInstance){return this;
}this.model.curLoadMediaContext=context;
airyInstance.loadMedia(context);
airyInstance.play({eventTimestamp:context.timestamp,isAsync:isAsync});
return this;
},show:function(){var airyInstance=this.model.airyInstance;
if(!airyInstance){return this;
}airyInstance.loadMedia(this.model.curLoadMediaContext);
return this;
},hide:function(){var airyInstance=this.model.airyInstance;
if(!airyInstance){return this;
}airyInstance.pause();
return this;
}});
Stage.MetricsReporter=Util.inheritsFrom(View,{CONTEXT_UPDATE_DURATION:"qos.videoSwitcher.contextUpdate.:requestDuration",CONTEXT_UPDATE_FAILED:"error.videoSwitcher.contextUpdate.:loadCount",initialize:function(){this._metricsPublisher=this.config.metricsPublisher;
this._reporter=new DurationMetricReporter(this.config.metricsPublisher,this.CONTEXT_UPDATE_DURATION);
},handleUpdatingContext:function(event,context){this._reporter.handleStartEvent(event,context);
},handleContextUpdated:function(event,context){this._reporter.handleEndEvent(event,context);
},handleContextUpdateFailed:function(){this._metricsPublisher.addCountMetric(this.CONTEXT_UPDATE_FAILED).publish();
this.clearMetrics();
},clearMetrics:function(){this._reporter.clearMetrics();
}});
var DurationMetricReporter=function(publisher,metricName,unit){this._publisher=publisher;
this._metricName=metricName;
this._metricUnit=unit||"ms";
};
DurationMetricReporter.prototype={initialize:function(){this._timestamp=null;
},handleStartEvent:function(event,context){this._timestamp=context.timestamp;
},handleEndEvent:function(event,context){if(this._timestamp==null){return;
}var durationMillis=context.timestamp-this._timestamp;
this._publisher.addPerformanceMetric(this._metricName,durationMillis,this._metricUnit).publish();
this.clearMetrics();
},clearMetrics:function(){this._timestamp=null;
}};
var ShovelerBase=Util.inheritsFrom(View,{_activeItem:null,initialize:function(){jQuery.each(this.config.items,Util.wrapWithScope(this._setupItemCallback,this));
},getSelectedId:function(){if(!this._activeItem){return null;
}return this._activeItem.getContentId();
},selectNext:function(){var nextItem=this._getNextItem();
if(!nextItem){this.trigger("nextnotavailable");
return this;
}this._selectItem(nextItem);
return this;
},prepareNext:function(){var nextItem=this._getNextItem();
if(!nextItem){return this;
}nextItem.prepare();
return this;
},_getNextItem:function(){var curIndex=this._activeItem.getIndex();
var items=this.config.items;
if(curIndex>=items.length){return null;
}var nextItem=items[curIndex+1];
return nextItem;
},select:function(contentId,forceShow,isAsync,selectRequestTimestamp){var index=0;
for(;
index<this.config.items.length;
index++){var item=this.config.items[index];
if(item.getContentId()!==contentId){continue;
}if(!item.isActive){this.trigger("selectmanually",contentId);
}this._selectItem(item,forceShow,isAsync,selectRequestTimestamp);
break;
}return this;
},_selectItem:function(item,forceShow,isAsync,selectRequestTimestamp){this.goToPageWithItem(item,forceShow);
item.select(isAsync,selectRequestTimestamp);
return this;
},goToPageWithItem:Util.noop,_setupItemCallback:function(index,item){var selectedCallback=this._createSelectedCallback(item);
item.bind("selected",selectedCallback,this).bind("selected",this.trigger,this).bind("selectedasync",selectedCallback,this).bind("selectedasync",this.trigger,this).bind("prepare",this.trigger,this);
if(!item.isActive){return;
}this._activeItem=item;
},_createSelectedCallback:function(item){return function(){this._selected(item);
};
},_selected:function(item){if(this._activeItem){this._activeItem.unselect();
}this._activeItem=item;
},render:Util.noop});
var Shoveler=Util.inheritsFrom(ShovelerBase,{_shoveler:null,goToPageWithItem:function(item){if(!this._shoveler){return;
}var itemIndex=item.getIndex();
var numItemsPerPage=this._shoveler.numCellsPerPage;
var pageIndex=Math.floor(itemIndex/numItemsPerPage);
if(pageIndex>=this._shoveler.getNumPages()){return;
}this._shoveler.gotoPage(pageIndex);
},render:function(){this._shoveler=this.$el.shoveler(Util.noop,this.config.items.length,{cellChangeSpeedInMs:30,horizPadding:10,preloadNextPage:true,prevButtonSelector:this.config.backButtonSelector,nextButtonSelector:this.config.nextButtonSelector});
return this;
}});
var FreeScrollCarousel=Util.inheritsFrom(ShovelerBase,{ANIMATION_DURATION:1000,goToPageWithItem:function(item,forceShow){var leftOffset=item.$el.offset().left;
var itemWidth=item.$el.width();
var scrollLeft=this.$el.scrollLeft();
var viewportWidth=this._getViewportWidth();
var alignmentOffsetPx=this.config.alignmentOffsetPx||0;
if(!forceShow&&!this._isWithinRangeForAutoscroll(leftOffset,itemWidth,viewportWidth)){return;
}if(this._isAlreadyCompletelyVisible(leftOffset,itemWidth,viewportWidth)){return;
}if(leftOffset>(viewportWidth-itemWidth)){scrollLeft+=leftOffset-viewportWidth+itemWidth+alignmentOffsetPx;
}else{scrollLeft+=leftOffset-alignmentOffsetPx;
}this.$el.animate({scrollLeft:scrollLeft},Math.abs(this.ANIMATION_DURATION));
},_isWithinRangeForAutoscroll:function(itemLeftOffset,itemWidth,viewportWidth){var leftBound=-itemWidth;
var rightBound=viewportWidth+itemWidth;
if(itemLeftOffset<0){return itemLeftOffset>=leftBound;
}else{return itemLeftOffset<=rightBound;
}},_isAlreadyCompletelyVisible:function(itemLeftOffset,itemWidth,viewportWidth){var leftBound=0;
var rightBound=viewportWidth-itemWidth;
return leftBound<=itemLeftOffset&&itemLeftOffset<=rightBound;
},_getViewportWidth:function(){return Math.max(document.documentElement.clientWidth,window.innerWidth||0);
}});
var Item=Util.inheritsFrom(View,{initialize:function(){this.isActive=this.$el.hasClass("airy-selected");
},getContentId:function(){return this.model.contentId;
},getIndex:function(){return this.model.index;
},mouseEvents:function(){return{"click":this.click};
},click:function(){this.select(false,new Date().valueOf());
},select:function(isAsync,selectRequestedTimestamp){if(this.isActive){return;
}var context=this.model;
if(selectRequestedTimestamp!=null){context.timestamp=selectRequestedTimestamp;
}this.trigger(isAsync?"selectedasync":"selected",context);
return this._toggle();
},prepare:function(){this.trigger("prepare",this.model);
return this;
},unselect:function(){if(!this.isActive){return;
}return this._toggle();
},_toggle:function(){this.$el.toggleClass("airy-selected");
this.isActive=!this.isActive;
return this;
}});
var amznJQ=window["amznJQ"];
if(amznJQ){amznJQ["declareAvailable"]("AiryVideoSwitcher");
}var P=window["P"];
if(P&&!VideoSwitcher.isRegisteredWithAui){P["register"]("AiryVideoSwitcher",function(){VideoSwitcher.isRegisteredWithAui=true;
return VideoSwitcher;
});
}};
if(window["P"]){P.when("jQuery").execute(initializeCodeDependentOnJQuery);
}else{if(window["jQuery"]){initializeCodeDependentOnJQuery(jQuery);
}}}(document,window,Math));
